#!@BASH_PROGRAM@
#
# Copyright (c) 2011-2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of PerfExpert.
#
# PerfExpert is free software: you can redistribute it and/or modify it under
# the terms of the The University of Texas at Austin Research License
# 
# PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.
# 
# Authors: Leonardo Fialho and Ashay Rane
#
# $HEADER$
#

prefix="@prefix@"
exec_prefix="@exec_prefix@"
BINDIR="@bindir@"
INCDIR="@includedir@"
LIBDIR="@libdir@"
ABS_BUILDDIR="@abs_builddir@"

# Try to find the macpo executable
if [ -f ${BINDIR}/macpo ]; then
    # Probable location after install
    MINST_PATH="${BINDIR}/macpo"
elif [ -f ${ABS_BUILDDIR}/macpo ]; then
    # Probable location before install
    MINST_PATH="${ABS_BUILDDIR}/macpo"
else
    echo "Unable to find the macpo executable"
    exit 1
fi

# Try to find the path to the mrt.h header file
if [ -f ${INCDIR}/mrt.h ]; then
    # Probable location after install
    MRT_INCLUDE_DIR="${INCDIR}"
elif [ -f ${ABS_BUILDDIR}/libmrt/mrt.h ]; then
    # Probable location before install
    MRT_INCLUDE_DIR="${ABS_BUILDDIR}/libmrt"
else
    echo "Unable to find the mrt.h header file"
    exit 1
fi

# Try to find the path to libmrt
if [ -f ${LIBDIR}/libmrt.a ]; then
    # Probable location after install
    MRT_LIB_DIR="${LIBDIR}"
elif [ -f ${ABS_BUILDDIR}/libmrt/libmrt.a ]; then
    # Probable location before install
    MRT_LIB_DIR="${ABS_BUILDDIR}/libmrt"
else
    echo "Unable to find libmrt"
    exit 1
fi

mktemp=`which mktemp`
if [ -n "$mktemp" ]
then
    tmp_macpo=`mktemp --tmpdir -t macpo.XXXXX`
    tmp_gfort=`mktemp --tmpdir -t macpo.XXXXX`
else
    tmp_macpo=/tmp/macpo.inst
    tmp_gfort=/tmp/macpo.gfort
fi

# Check if we have a --help in the arguments
for arg in $*
do
  if [ -n "$arg" ]
  then
    if [ "$arg" == "--help" -o "$arg" == "-h" ]
    then
      echo "Usage: macpo.sh [OPTIONS] [source file | object file ]"
      echo "Wrapper script to compile code and instrument a specific function or loop."
      echo
      echo "  --macpo:instrument=<location>         Instrument memory accesses in function"
      echo "                                        or loop marked by <location>."
      echo "  --macpo:check-alignment=<location>    Check alignment of data structures in"
      echo "                                        function or loop marked by <location>."
      echo "  --macpo:record-tripcount=<location>   Check if the trip count of the loop"
      echo "                                        identified by <location> is too low."
      echo "  --macpo:record-branchpath=<location>  Check if the branches in loop identified"
      echo "                                        by <location> always (or mostly) "
      echo "                                        evaluate to true or false or are"
      echo "                                        unpredictable."
      echo "  --macpo:vector-strides=<location>     Check if vectorizing the loop identified"
      echo "                                        by <location> will require "
      echo "                                        gather/scatter operation(s) for array"
      echo "                                        references."
      echo "  --macpo:overlap-check=<location>      Check if array references in loop at"
      echo "                                        <location> overlap with one another."
      echo "  --macpo:stride-check=<location>       Check if array references in loop at"
      echo "                                        <location> have unit or fixed strides."
      echo "  --macpo:backup-filename=<filename>    Save source file into <filename> before"
      echo "                                        instrumenting."
      echo "  --macpo:no-compile                    Instrument code but don't compile it."
      echo "  --macpo:enable-sampling               Enable sampling mode [default]."
      echo "  --macpo:disable-sampling              Disable sampling mode."
      echo "  --macpo:profile-analysis              Collect basic profiling information"
      echo "                                        about the requested analysis or "
      echo "                                        instrumentation."
      echo "  --help                                Give this help list."
      echo
      echo "  In addition to above options, all options accepted by GNU compilers can be"
      echo "  passed to macpo.sh."

      exit 0
    fi
  fi
done

CXXFLAGS="-I${MRT_INCLUDE_DIR}"
MACPO_EXTRA_FLAGS="-rose:openmp:ast_only"
LDFLAGS="-L${MRT_LIB_DIR} -lmrt -lstdc++ -lgsl -lgslcblas"

# Finally, invoke the macpo executable
MACPO_CMD="${MINST_PATH} ${MACPO_EXTRA_FLAGS} ${CXXFLAGS} ${LDFLAGS} $*"
eval ${MACPO_CMD} > "$tmp_macpo"

ret_code=$?

if [ ${ret_code} != 0 ]
then
    # try running with gfortran
    if [ -z "${GNU_FORTRAN_COMPILER}" ]
    then
        GNU_FORTRAN_COMPILER=`which gfortran`
    fi

    if [ -n "$GNU_FORTRAN_COMPILER" -a -f "$GNU_FORTRAN_COMPILER" ]
    then
        GFORT_CMD="${GNU_FORTRAN_COMPILER} ${LDFLAGS} $*"
        eval ${GFORT_CMD} > "$tmp_gfort"

        # If this also resulted in an error, show the original macpo error
        if [ $? != 0 ]
        then
            cat "$tmp_macpo"
            if [ -n "$MACPO_DEBUG" ]
            then
                echo
                echo "Failed to run the following two commands:"
                echo ${MACPO_CMD}
                echo ${GFORT_CMD}
            fi
        else
            # There was no error, hence reset the return code.
            ret_code=0
            cat "$tmp_gfort"
        fi
    else
        cat "$tmp_macpo"
        if [ -n "$MACPO_DEBUG" ]
        then
            echo
            echo "Failed to run the following command:"
            echo ${MACPO_CMD}
        fi
    fi
else
    cat "$tmp_macpo"
fi

# Clean up
rm -f "$tmp_macpo" "$tmp_gfort" 2>/dev/null

# Exit with the appropriate return code.
exit ${ret_code}

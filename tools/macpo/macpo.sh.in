#!@BASH_PROGRAM@
#
# Copyright (c) 2011-2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of PerfExpert.
#
# PerfExpert is free software: you can redistribute it and/or modify it under
# the terms of the The University of Texas at Austin Research License
# 
# PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.
# 
# Authors: Leonardo Fialho and Ashay Rane
#
# $HEADER$
#

prefix="@prefix@"
exec_prefix="@exec_prefix@"
BINDIR="@bindir@"
INCDIR="@includedir@"
LIBDIR="@libdir@"
ABS_BUILDDIR="@abs_builddir@"

# Try to find the macpo executable
if [ -f ${BINDIR}/macpo ]; then
    # Probable location after install
    MINST_PATH="${BINDIR}/macpo"
elif [ -f ${ABS_BUILDDIR}/macpo ]; then
    # Probable location before install
    MINST_PATH="${ABS_BUILDDIR}/macpo"
else
    echo "Unable to find the macpo executable"
    exit 1
fi

# Try to find the path to the mrt.h header file
if [ -f ${INCDIR}/mrt.h ]; then
    # Probable location after install
    MRT_INCLUDE_DIR="${INCDIR}"
elif [ -f ${ABS_BUILDDIR}/libmrt/mrt.h ]; then
    # Probable location before install
    MRT_INCLUDE_DIR="${ABS_BUILDDIR}/libmrt"
else
    echo "Unable to find the mrt.h header file"
    exit 1
fi

# Try to find the path to libmrt
if [ -f ${LIBDIR}/libmrt.a ]; then
    # Probable location after install
    MRT_LIB_DIR="${LIBDIR}"
elif [ -f ${ABS_BUILDDIR}/libmrt/libmrt.a ]; then
    # Probable location before install
    MRT_LIB_DIR="${ABS_BUILDDIR}/libmrt"
else
    echo "Unable to find libmrt"
    exit 1
fi

mktemp=`which mktemp`
if [ -n "$mktemp" ]
then
	tmp_macpo=`mktemp --tmpdir -t macpo.XXXXX`
	tmp_gfort=`mktemp --tmpdir -t macpo.XXXXX`
else
	tmp_macpo=/tmp/macpo.inst
	tmp_gfort=/tmp/macpo.gfort
fi

# Check if we have a --help in the arguments
for arg in $*
do
  if [ -n "$arg" ]
  then
    if [ "$arg" == "--help" -o "$arg" == "-h" ]
    then
      echo "Usage: macpo.sh [OPTIONS] [source file | object file ]"
      echo "Wrapper script to compile code and instrument a specific function or loop."
      echo
      echo "  --macpo:instrument [default]    Instruct MACPO to instrument code"
      echo "  --macpo:loopsplit               Instruct MACPO to split a given loop"
      echo "  --macpo:noinst                  Do not make any changes to the code, just invoke the compiler"
      echo "  --macpo:function=\"foo\"          Instrument array accesses in function foo"
      echo "  --macpo:loop=\"foo:23\"           Instrument / split loop at line 23 in function foo"
      echo "  --help                          Give this help list"
      echo
      echo "  In addition to these, all options accepted by GNU compilers can be passed to macpo.sh."

      exit 0
    fi
  fi
done

# Finally, invoke the macpo executable
${MINST_PATH} -I${MRT_INCLUDE_DIR} -L${MRT_LIB_DIR} $* -lmrt &> "$tmp_macpo"

if [ $? != 0 ]
then
	# try running with gfortran
	if [ -z "${GNU_FORTRAN_COMPILER}" ]
	then
		GNU_FORTRAN_COMPILER=`which gfortran`
	fi

	if [ -n "$GNU_FORTRAN_COMPILER" -a -f "$GNU_FORTRAN_COMPILER" ]
	then
		"$GNU_FORTRAN_COMPILER" -L${MRT_LIB_DIR} $* -lmrt &> "$tmp_gfort"

		# If this also resulted in an error, show the original macpo error
		if [ $? != 0 ]
		then
			cat "$tmp_macpo"
		else
			cat "$tmp_gfort"
		fi
	else
		cat "$tmp_macpo"
	fi
else
	cat "$tmp_macpo"
fi

# Clean up
rm -f "$tmp_macpo" "$tmp_gfort" 2>/dev/null

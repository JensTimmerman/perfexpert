#!@BASH_PROGRAM@
#
# Copyright (c) 2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of OptTran.
#
# OptTran as well PerfExpert are free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# OptTran and PerfExpert are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with OptTran or PerfExpert. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Leonardo Fialho
#
# $HEADER$
#

# TODO:
#
# 0) Receive compiler/compilation flags as parameters
# 1) Check arguments
# 2) Create the unique identifier for opttran run
# 3) Insert such identifier on tools arguments
# 4) ...

###############################################################################
# Parsing options
#
# -q quiet
# -a opttran working dir
# -s source file
# -v enable verbose debug
# -b binary program file

OPTTRAN_DIR="teste"
USER_BINARY="mm_naive"
USER_SOURCE="mm_naive.c"
DEBUG="yes"
#LOGFILE="/dev/stdout"
#LOGFILE="/dev/null"
LOGFILE="teste/opttran.log"

###############################################################################
# Script variables
#
# Install directories
#
OPTTRAN_PREFIX="@prefix@"
OPTTRAN_BINDIR="@prefix@/bin"
OPTTRAN_LIBDIR="@prefix@/lib"
OPTTRAN_ETCDIR="@prefix@/etc"
OPTTRAN_VARDIR="@prefix@/var"
#
# Path to tools
#
OPTTRAN_PERFEXPERT_RUN_EXP="${OPTTRAN_BINDIR}/perfexpert_run_exp"
OPTTRAN_PERFEXPERT="${OPTTRAN_BINDIR}/perfexpert"
OPTTRAN_RECOMMENDER="${OPTTRAN_BINDIR}/recommender"
OPTTRAN_PR="${OPTTRAN_BINDIR}/opttran_pr"
OPTTRAN_CT="${OPTTRAN_BINDIR}/opttran_ct"

###############################################################################
# Set 'perfexpert_run_exp' up
#
# Usage: perfexpert_run_exp [-ngh] [-t DIR] [-s FILE] [-o FILE] program_executable
#                           [program_arguments]
#
#  -s --structure FILE  Use FILE as program structure (generated by hpcstruct)
#  -o --output FILE     Save measurements to FILE
#  -n --no-debug        Do not switch to debug mode if program fails to execute
#                       with PerfExpert
#  -g --left-garbage    Do not remove the temporary directory
#  -t --tempdir DIR     Use DIR as temporary directory. The content in this
#                       directory will be erased before using it (!! WARNING !!)
#  -h --help            Show this message
#
OPTTRAN_PERFEXPERT_RUN_EXP_CMD="${OPTTRAN_PERFEXPERT_RUN_EXP}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -t ${OPTTRAN_DIR}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -g"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -o ${OPTTRAN_DIR}/perfexpert-experiment.xml"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" ${USER_BINARY}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" > ${OPTTRAN_DIR}/perfexpert_run_exp.output"

###############################################################################
# Set 'perfexpert' up
#
# Usage: perfexpert [OPTIONS] <threshold> <experiment.xml> [<experiment.xml>]
#
# -h,--help                              Show this screen
# -a,--aggregate                         Show whole-program information only
# -o,--opttran                           Show recommendations using OptTran format
# -r[=<limit>],--recommend[=<limit>]     Recommend suggestions for optimization
# -t=<thread#>,--threads=<thread#>       Show information for specific threads
#
# <threshold>                            Threshold between 0 and 1
# <experiment.xml>                       experiment.xml file generated using
#                                        `perfexpert_run_exp'
# [<experiment.xml>]                     Second experiment.xml file, for
#                                        comparison only. Not valid with -r
#
OPTTRAN_PERFEXPERT_CMD="${OPTTRAN_PERFEXPERT}"
OPTTRAN_PERFEXPERT_CMD+=" --recommend"
OPTTRAN_PERFEXPERT_CMD+=" --opttran"
OPTTRAN_PERFEXPERT_CMD+=" 0.1"
OPTTRAN_PERFEXPERT_CMD+=" ${OPTTRAN_DIR}/perfexpert-experiment.xml"
OPTTRAN_PERFEXPERT_CMD+=" > ${OPTTRAN_DIR}/perfexpert.output"

###############################################################################
# Set 'recommender' up
#
# Usage: recommender -i|-f file [-o file] [-d database] [-m file] [-nvch] [-p pid]
#                    [-a dir] [-s file] [-l level]
#  -i --stdin           Use STDIN as input for performance measurements
#  -f --inputfile       Use 'file' as input for performance measurements
#  -o --outputfile      Use 'file' as output for recommendations (default stdout)
#                       if the file exists its content will be overwritten
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -m --metricfile      Use 'file' to define metrics different from the default
#  -n --newmetrics      Do not use the system metrics table. A temporary table
#                       will be created using the default metrics file:
#                       /home/fialho/opttran/etc/recommender-metrics.txt
#  -r --recommendations Number of recommendation to show
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -s --sourcefile      Use 'file' to extract source code fragments identified as
#                       bootleneck by PerfExpert (this option sets -a argument)
#  -p --opttranid       Use 'pid' to identify consecutive calls to Recommender.
#                       This argument is set automatically when using OptTran
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
OPTTRAN_RECOMMENDER_CMD="${OPTTRAN_RECOMMENDER}"
OPTTRAN_RECOMMENDER_CMD+=" --verbose_level 10"
OPTTRAN_RECOMMENDER_CMD+=" --inputfile ${OPTTRAN_DIR}/perfexpert.output"
OPTTRAN_RECOMMENDER_CMD+=" --colorful"
OPTTRAN_RECOMMENDER_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_RECOMMENDER_CMD+=" --sourcefile ${USER_SOURCE}"
OPTTRAN_RECOMMENDER_CMD+=" > ${OPTTRAN_DIR}/recommender.output"

###############################################################################
# Set 'opttran_pr' up
#
# Usage: opttran_pr -i|-f file [-o file] [-tvch] [-l level] [-a dir] [-p pid]
#                   [-d database]
#  -i --stdin           Use STDIN as input for patterns
#  -f --inputfile       Use 'file' as input for patterns
#  -o --outputfile      Use 'file' as output (default stdout)
#  -t --testall         Test all the pattern recognizers of each code fragment,
#                       otherwise stop on the first valid one
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
OPTTRAN_PR_CMD="${OPTTRAN_PR}"
OPTTRAN_PR_CMD+=" --verbose_level 10"
OPTTRAN_PR_CMD+=" --colorful"
OPTTRAN_PR_CMD+=" --inputfile ${OPTTRAN_DIR}/recommendations.txt"
OPTTRAN_PR_CMD+=" --testall"
OPTTRAN_PR_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_PR_CMD+=" > ${OPTTRAN_DIR}/opttran_pr.output"

###############################################################################
# Set 'opttran_ct' up
#
# Usage: opttran_ct -i|-f file [-o file] [-vch] [-l level] [-a dir] [-d database]
#                   [-p pid]
# -i --stdin           Use STDIN as input for patterns
# -f --inputfile       Use 'file' as input for patterns
# -o --outputfile      Use 'file' as output (default stdout)
# -a --opttran         Create OptTran (automatic performance optimization) files
#                      into 'dir' directory (default: create no OptTran files).
#                      This argument overwrites -o (no output on STDOUT, except
#                      for verbose messages)
# -t --transfall       Apply all possible transformation to each fragments (not
#                      recommended, some transformations are not compatible)
# -d --database        Select the recommendation database file
#                      (default: /home/fialho/opttran/var/recommendation.db)
# -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
# -v --verbose         Enable verbose mode using default verbose level (5)
# -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
# -c --colorful        Enable colors on verbose mode, no weird characters will
#                      appear on output files
# -h --help            Show this message
#
OPTTRAN_CT_CMD="${OPTTRAN_CT}"
OPTTRAN_CT_CMD+=" --verbose_level 10"
OPTTRAN_CT_CMD+=" --colorful"
OPTTRAN_CT_CMD+=" --inputfile ${OPTTRAN_DIR}/transformations.txt"
OPTTRAN_CT_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_CT_CMD+=" > ${OPTTRAN_DIR}/opttran_ct.output"

###############################################################################
# Let's run these tools!
#

# Create OPTTRAN dir
eval @MKDIR_P@ ${OPTTRAN_DIR}
if [ 0 != $? ]; then
    echo "[opttran.sh] unable to create OPTTRAN directory (${OPTTRAN_DIR})"
    exit 1
fi
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Creating dir: ${OPTTRAN_DIR}" >> ${LOGFILE}
    echo "[opttran.sh] @MKDIR_P@ ${OPTTRAN_DIR}" >> ${LOGFILE}
fi

# Run PerfExpert (run_exp)
echo -n "[opttran.sh] Running PerfExpert: measurements phase (this could take a while)..."
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_PERFEXPERT_RUN_EXP_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_PERFEXPERT_RUN_EXP_CMD}
if [ 0 == $? ]; then
    echo " ok!"
else
    echo " fail :("
    echo "[opttran.sh] ERROR: running PerfExpert (run_exp)" >> ${LOGFILE}
    exit 1
fi

# Run PerfExpert (analysis)
echo -n "[opttran.sh] Running PerfExpert: analysis phase..."
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_PERFEXPERT_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_PERFEXPERT_CMD}
if [ 0 == $? ]; then
    echo " ok!"
else
    echo " fail :("
    echo "[opttran.sh] ERROR: running PerfExpert (analysis)" >> ${LOGFILE}
    exit 1
fi

# Clean PerfExpert perfexpert.log
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Moving: perfexpert.log to ${OPTTRAN_DIR}/" >> ${LOGFILE}
fi
eval mv perfexpert.log ${OPTTRAN_DIR}/
if [ 0 != $? ]; then
    echo "[opttran.sh] ERROR: unable to move perfexpert.log" >> ${LOGFILE}
fi

# Run Recommender
echo -n "[opttran.sh] Looking for recommendations..."
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_RECOMMENDER_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_RECOMMENDER_CMD}
if [ 0 == $? ]; then
    echo " ok!"
else
    echo " fail :("
    echo "[opttran.sh] ERROR: running Recommender" >> ${LOGFILE}
    exit 1
fi

# Run the Pattern Recognizer
echo -n "[opttran.sh] Test the feasibility of recommendations..."
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_PR_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_PR_CMD}
if [ 0 == $? ]; then
    echo " ok!"
else
    echo " fail :("
    echo "[opttran.sh] ERROR: running OptTran:PR" >> ${LOGFILE}
    exit 1
fi

# Run the Code Transformer
echo -n "[opttran.sh] Applying code transformations..."
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_CT_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_CT_CMD}
if [ 0 == $? ]; then
    echo " ok!"
else
    echo " fail :("
    echo "[opttran.sh] ERROR: running OptTran:CT" >> ${LOGFILE}
    exit 1
fi





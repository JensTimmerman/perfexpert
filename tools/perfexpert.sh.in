#!@BASH_PROGRAM@
#
# Copyright (c) 2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of PerfExpert.
#
# PerfExpert is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PerfExpert. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Leonardo Fialho
#
# $HEADER$
#

# TODO:
#
# 0) Receive compiler/compilation flags as parameters
# 1) Check arguments
# 2) Create the unique identifier for opttran run
# 3) Insert such identifier on tools arguments
# 4) ...

###############################################################################
# Parsing options
#
# -q quiet
# -s source file
# -v enable verbose debug
# -b binary program file (not sure if it is necessary)

WORKDIR="teste"
USER_BINARY="mm_naive"
USER_SOURCE="mm_naive.c"
DEBUG="yes"
#VERBOSE="/dev/null"
VERBOSE="/dev/stdout"
LOGFILE="${WORKDIR}/perfexpert.log"
CI_OUTPUT_DIR="${WORKDIR}/fragments/1"













###############################################################################
# Script variables
#
# Install directories
#
PERFEXPERT_PREFIX="@prefix@"
PERFEXPERT_BINDIR="@prefix@/bin"
PERFEXPERT_LIBDIR="@prefix@/lib"
PERFEXPERT_ETCDIR="@prefix@/etc"
PERFEXPERT_VARDIR="@prefix@/var"
#
# Path to tools
#
ANALYZER_RUN_EXP="${PERFEXPERT_BINDIR}/analyzer_run_exp"
ANALYZER="${PERFEXPERT_BINDIR}/analyzer"
RECOMMENDER="${PERFEXPERT_BINDIR}/recommender"
PR="${PERFEXPERT_BINDIR}/pr"
CT="${PERFEXPERT_BINDIR}/ct"
CI="${PERFEXPERT_BINDIR}/ci"

###############################################################################
# Set 'analyzerrun_exp' up
#
# Usage: analyzerrun_exp [-ngh] [-t DIR] [-s FILE] [-o FILE] program_executable
#                           [program_arguments]
#
#  -s --structure FILE  Use FILE as program structure (generated by hpcstruct)
#  -o --output FILE     Save measurements to FILE
#  -n --no-debug        Do not switch to debug mode if program fails to execute
#                       with PerfExpert
#  -g --left-garbage    Do not remove the temporary directory
#  -t --tempdir DIR     Use DIR as temporary directory. The content in this
#                       directory will be erased before using it (!! WARNING !!)
#  -h --help            Show this message
#
ANALYZER_RUN_EXP_CMD="${ANALYZER_RUN_EXP}"
ANALYZER_RUN_EXP_CMD+=" -t ${WORKDIR}"
ANALYZER_RUN_EXP_CMD+=" -g"
ANALYZER_RUN_EXP_CMD+=" -o ${WORKDIR}/perfexpert-experiment.xml"
ANALYZER_RUN_EXP_CMD+=" ${USER_BINARY}"
ANALYZER_RUN_EXP_CMD+=" &> ${WORKDIR}/analyzer_run_exp.output"

###############################################################################
# Set 'perfexpert' up
#
# Usage: perfexpert [OPTIONS] <threshold> <experiment.xml> [<experiment.xml>]
#
# -h,--help                              Show this screen
# -a,--aggregate                         Show whole-program information only
# -o,--opttran                           Show recommendations using OptTran format
# -r[=<limit>],--recommend[=<limit>]     Recommend suggestions for optimization
# -t=<thread#>,--threads=<thread#>       Show information for specific threads
#
# <threshold>                            Threshold between 0 and 1
# <experiment.xml>                       experiment.xml file generated using
#                                        `analyzer_run_exp'
# [<experiment.xml>]                     Second experiment.xml file, for
#                                        comparison only. Not valid with -r
#
ANALYZER_CMD="${PERFEXPERT}"
ANALYZER_CMD+=" --recommend"
ANALYZER_CMD+=" --opttran"
ANALYZER_CMD+=" 0.1"
ANALYZER_CMD+=" ${WORKDIR}/perfexpert-experiment.xml"
ANALYZER_CMD+=" &> ${WORKDIR}/perfexpert.output"

###############################################################################
# Set 'recommender' up
#
# Usage: recommender -i|-f file [-o file] [-d database] [-m file] [-nvch] [-p pid]
#                    [-a dir] [-s file] [-l level]
#  -i --stdin           Use STDIN as input for performance measurements
#  -f --inputfile       Use 'file' as input for performance measurements
#  -o --outputfile      Use 'file' as output for recommendations (default stdout)
#                       if the file exists its content will be overwritten
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -m --metricfile      Use 'file' to define metrics different from the default
#  -n --newmetrics      Do not use the system metrics table. A temporary table
#                       will be created using the default metrics file:
#                       /home/fialho/opttran/etc/recommender-metrics.txt
#  -r --recommendations Number of recommendation to show
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -s --sourcefile      Use 'file' to extract source code fragments identified as
#                       bootleneck by PerfExpert (this option sets -a argument)
#  -p --opttranid       Use 'pid' to identify consecutive calls to Recommender.
#                       This argument is set automatically when using OptTran
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
RECOMMENDER_CMD="${RECOMMENDER}"
RECOMMENDER_CMD+=" --verbose_level 10"
RECOMMENDER_CMD+=" --inputfile ${WORKDIR}/perfexpert.output"
RECOMMENDER_CMD+=" --colorful"
RECOMMENDER_CMD+=" --opttran ${WORKDIR}"
RECOMMENDER_CMD+=" --sourcefile ${USER_SOURCE}"
RECOMMENDER_CMD+=" &> ${WORKDIR}/recommender.output"

###############################################################################
# Set 'pr' up
#
# Usage: pr -i|-f file [-o file] [-tvch] [-l level] [-a dir] [-p pid]
#                   [-d database]
#  -i --stdin           Use STDIN as input for patterns
#  -f --inputfile       Use 'file' as input for patterns
#  -o --outputfile      Use 'file' as output (default stdout)
#  -t --testall         Test all the pattern recognizers of each code fragment,
#                       otherwise stop on the first valid one
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
PR_CMD="${PR}"
PR_CMD+=" --verbose_level 10"
PR_CMD+=" --colorful"
PR_CMD+=" --inputfile ${WORKDIR}/recommendations.txt"
PR_CMD+=" --testall"
PR_CMD+=" --opttran ${WORKDIR}"
PR_CMD+=" &> ${WORKDIR}/pr.output"

###############################################################################
# Set 'ct' up
#
# Usage: ct -i|-f file [-o file] [-vch] [-l level] [-a dir] [-d database]
#                   [-p pid]
# -i --stdin           Use STDIN as input for patterns
# -f --inputfile       Use 'file' as input for patterns
# -o --outputfile      Use 'file' as output (default stdout)
# -a --opttran         Create OptTran (automatic performance optimization) files
#                      into 'dir' directory (default: create no OptTran files).
#                      This argument overwrites -o (no output on STDOUT, except
#                      for verbose messages)
# -t --transfall       Apply all possible transformation to each fragments (not
#                      recommended, some transformations are not compatible)
# -d --database        Select the recommendation database file
#                      (default: /home/fialho/opttran/var/recommendation.db)
# -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
# -v --verbose         Enable verbose mode using default verbose level (5)
# -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
# -c --colorful        Enable colors on verbose mode, no weird characters will
#                      appear on output files
# -h --help            Show this message
#
CT_CMD="${CT}"
CT_CMD+=" --verbose_level 10"
CT_CMD+=" --colorful"
CT_CMD+=" --inputfile ${WORKDIR}/transformations.txt"
CT_CMD+=" --opttran ${WORKDIR}"
CT_CMD+=" &> ${WORKDIR}/ct.output"

###############################################################################
# Set 'ci' up
#
# Usage: ci -i|-f file -o dir [-vch] [-l level] [-a dir]
# -i --stdin           Use STDIN as input for patterns
# -f --inputfile       Use 'file' as input for patterns
# -o --outputdir       Use 'dir' as outpur directory for integrated source code
# -a --opttran         Create OptTran (automatic performance optimization) files
#                      into 'dir' directory (default: create no OptTran files).
# -v --verbose         Enable verbose mode using default verbose level (5)
# -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
# -c --colorful        Enable colors on verbose mode, no weird characters will
#                      appear on output files
# -h --help            Show this message
#
CI_CMD="${CI}"
CI_CMD+=" --verbose_level 10"
CI_CMD+=" --colorful"
CI_CMD+=" --inputfile ${WORKDIR}/functions.txt"
CI_CMD+=" --opttran ${WORKDIR}"
CI_CMD+=" --outputdir ${CI_OUTPUT_DIR}"
CI_CMD+=" &> ${WORKDIR}/ci.output"

###############################################################################
# It's time to make magic...
#

# Create OPTTRAN dir
eval @MKDIR_P@ ${WORKDIR}
if [ 0 != $? ]; then
    echo "[perfexpert.sh] Error: unable to create OPTTRAN directory (${WORKDIR})"
    exit 1
fi
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Creating dir: ${WORKDIR}" >> ${LOGFILE}
    echo "[perfexpert.sh] @MKDIR_P@ ${WORKDIR}" >> ${LOGFILE}
fi

# Run PerfExpert (run_exp)
echo -n "[perfexpert.sh] Step 1 of 6: Running PerfExpert measurements phase (this could take a while)..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${ANALYZER_RUN_EXP_CMD}" >> ${LOGFILE}
fi
eval ${ANALYZER_RUN_EXP_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running PerfExpert (run_exp)" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PerfExpert (run_exp)"
    exit 1
fi

# Run PerfExpert (analysis)
echo -n "[perfexpert.sh] Step 2 of 6: Running PerfExpert analysis phase..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${ANALYZER_CMD}" >> ${LOGFILE}
fi
eval ${ANALYZER_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running PerfExpert (analysis)" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PerfExpert (analysis)"
    exit 1
fi

# Clean PerfExpert perfexpert.log
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Moving: perfexpert.log to ${WORKDIR}/" >> ${LOGFILE}
fi
eval mv perfexpert.log ${WORKDIR}/
if [ 0 != $? ]; then
    echo "[perfexpert.sh] Error: unable to move perfexpert.log" >> ${LOGFILE}
fi

# Run Recommender
echo -n "[perfexpert.sh] Step 3 of 6: Looking for recommendations..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${RECOMMENDER_CMD}" >> ${LOGFILE}
fi
eval ${RECOMMENDER_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running Recommender" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running Recommender"
    exit 1
fi

# Run the Pattern Recognizer
echo -n "[perfexpert.sh] Step 4 of 6: Testing feasibility of recommendations..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${PR_CMD}" >> ${LOGFILE}
fi
eval ${PR_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running PR" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PR"
    exit 1
fi

# Run the Code Transformer
echo -n "[perfexpert.sh] Step 5 of 6: Applying code transformations..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${CT_CMD}" >> ${LOGFILE}
fi
eval ${CT_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running CT" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running CT"
    exit 1
fi

# Run the Code Integrator
echo -n "[perfexpert.sh] Step 6 of 6: Integrating application source code..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${CI_CMD}" >> ${LOGFILE}
fi
eval ${CI_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running CI" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running CI"
    exit 1
fi


#!@BASH_PROGRAM@
#
# Copyright (c) 2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of PerfExpert.
#
# PerfExpert is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PerfExpert. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Leonardo Fialho
#
# $HEADER$
#

# TODO:
#
# 1) Receive compiler/compilation flags as parameters
# 2) Create the unique identifier for perfexpert run
# 3) Insert such identifier on tools arguments
# 4) ...

###############################################################################
#         12345678901234567890123456789012345678901234567890123456789012345678901234567890
showHelp() {
    echo "Usage: perfexpert [-ghvq] [-w DIR] [-s FILE] program_executable [program_arguments]"
    echo
    echo "  -s --source FILE    Use FILE as the source code"
    echo "  -q --quiet          Disable verbose mode"
    echo "  -v --verbose        Enable verbose mode"
    echo "  -w --workdir DIR    Use DIR as temporary directory"
    echo "  -g --left-garbage   Do not remove the temporary directory"
    echo "  -h --help           Show this message"
}

###############################################################################
perfexpert_run_exp() {
    PERFEXPERT_RUN_EXP_CMD="${PERFEXPERT_RUN_EXP}"
    PERFEXPERT_RUN_EXP_CMD+=" -t ${WORKDIR}"
    PERFEXPERT_RUN_EXP_CMD+=" -g"
    PERFEXPERT_RUN_EXP_CMD+=" -o ${WORKDIR}/perfexpert-experiment.xml"
    PERFEXPERT_RUN_EXP_CMD+=" ${USER_BINARY}"
    PERFEXPERT_RUN_EXP_CMD+=" &> ${WORKDIR}/perfexpert_run_exp.output.txt"

    echo -n "[perfexpert.sh] Step 1 of 7: Running PerfExpert measurements phase (this could take a while)..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${PERFEXPERT_RUN_EXP_CMD}" >> ${LOGFILE}
    fi

    eval ${PERFEXPERT_RUN_EXP_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running PerfExpert (run_exp)" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: running PerfExpert (run_exp)"
        exit 1
    fi
}

###############################################################################
analyzer() {
    ANALYZER_CMD="${ANALYZER}"
    ANALYZER_CMD+=" --recommend"
    ANALYZER_CMD+=" --automatic"
    ANALYZER_CMD+=" 0.1"
    ANALYZER_CMD+=" ${WORKDIR}/perfexpert-experiment.xml"
    ANALYZER_CMD+=" &> ${WORKDIR}/analyzer.output.txt"

    echo -n "[perfexpert.sh] Step 2 of 7: Running PerfExpert analysis phase..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${ANALYZER_CMD}" >> ${LOGFILE}
    fi

    eval ${ANALYZER_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running PerfExpert (analyzer)" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: running PerfExpert (analyzer)"
        exit 1
    fi

    ANALYZER_CMD2="${ANALYZER}"
    ANALYZER_CMD2+=" 0.1"
    ANALYZER_CMD2+=" ${WORKDIR}/perfexpert-experiment.xml"
    ANALYZER_CMD2+=" &> ${WORKDIR}/analyzer2.output.txt"

    echo -n "[perfexpert.sh] Step 3 of 7: Running PerfExpert second analysis phase..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${ANALYZER_CMD2}" >> ${LOGFILE}
    fi

    eval ${ANALYZER_CMD2}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running PerfExpert (2nd analyzer)" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: running PerfExpert (2nd analyzer)"
        exit 1
    fi
}

###############################################################################
recommender() {
    RECOMMENDER_CMD="${RECOMMENDER}"
    RECOMMENDER_CMD+=" --verbose_level 10"
    RECOMMENDER_CMD+=" --inputfile ${WORKDIR}/analyzer.output.txt"
    RECOMMENDER_CMD+=" --colorful"
    RECOMMENDER_CMD+=" --automatic ${WORKDIR}"
    RECOMMENDER_CMD+=" --sourcefile ${USER_SOURCE}"
    RECOMMENDER_CMD+=" &> ${WORKDIR}/recommender.output.txt"

    echo -n "[perfexpert.sh] Step 4 of 7: Looking for recommendations..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${RECOMMENDER_CMD}" >> ${LOGFILE}
    fi

    eval ${RECOMMENDER_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running Recommender" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: running Recommender"
        exit 1
    fi
}

###############################################################################
perfexpert_pr() {
    PERFEXPERT_PR_CMD="${PERFEXPERT_PR}"
    PERFEXPERT_PR_CMD+=" --verbose_level 10"
    PERFEXPERT_PR_CMD+=" --colorful"
    PERFEXPERT_PR_CMD+=" --inputfile ${WORKDIR}/perfexpert_recommendations.txt"
    PERFEXPERT_PR_CMD+=" --testall"
    PERFEXPERT_PR_CMD+=" --automatic ${WORKDIR}"
    PERFEXPERT_PR_CMD+=" &> ${WORKDIR}/perfexpert_pr.output.txt"

    echo -n "[perfexpert.sh] Step 5 of 7: Testing feasibility of recommendations..." >> ${VERBOSE}
    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${PR_CMD}" >> ${LOGFILE}
    fi

    eval ${PR_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running PerfExpert:PR, calling recommender" >> ${LOGFILE}
        echo "[perfexpert.sh] Sorry, we ran out of automatic transformations."
        echo "[perfexpert.sh] Here are some optimizations we recommend:"
        ${PERFEXPERT_RECOMMENDER} --inputfile ${WORKDIR}/perfexpert.output.txt
        exit 1
    fi
}

###############################################################################
perfexpert_ct() {
    PERFEXPERT_CT_CMD="${PERFEXPERT_CT}"
    PERFEXPERT_CT_CMD+=" --verbose_level 10"
    PERFEXPERT_CT_CMD+=" --colorful"
    PERFEXPERT_CT_CMD+=" --inputfile ${WORKDIR}/perfexpert_transformations.txt"
    PERFEXPERT_CT_CMD+=" --automatic ${WORKDIR}"
    PERFEXPERT_CT_CMD+=" &> ${WORKDIR}/perfexpert_ct.output.txt"

    echo -n "[perfexpert.sh] Step 6 of 7: Applying code transformations..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${CT_CMD}" >> ${LOGFILE}
    fi

    eval ${CT_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running CT" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running CT"
    exit 1
fi
}

###############################################################################
perfexpert_ci() {
    CI_CMD="${PERFEXPERT_CI}"
    CI_CMD+=" --verbose_level 10"
    CI_CMD+=" --colorful"
    CI_CMD+=" --inputfile ${WORKDIR}/perfexpert_functions.txt"
    CI_CMD+=" --automatic ${WORKDIR}"
    CI_CMD+=" --outputdir ${CI_OUTPUT_DIR}"
    CI_CMD+=" &> ${WORKDIR}/perfexpert_ci.output.txt"

    echo -n "[perfexpert.sh] Step 7 of 7: Integrating source code..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${CI_CMD}" >> ${LOGFILE}
    fi

    eval ${CI_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: running CI" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: running CI"
        exit 1
    fi
}

###############################################################################
compile() {
    COMPILE_CMD="gcc -g -O3 -o ${USER_BINARY} ${USER_SOURCE}"

    echo -n "[perfexpert.sh] Compiling..." >> ${VERBOSE}

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Running: ${COMPILE_CMD}" >> ${LOGFILE}
    fi

    eval ${COMPILE_CMD}

    if [ 0 == $? ]; then
        echo " ok!" >> ${VERBOSE}
    else
        echo " fail :(" >> ${VERBOSE}
        echo "[perfexpert.sh] Error: compiling code" >> ${LOGFILE}
        echo "[perfexpert.sh] Error: compiling code"
        exit 1
    fi
}

###############################################################################
# Parsing options
#
for arg; do
    delim=""
    case "$arg" in
        # translate GNU long options to short options
        --source)       args="${args}-s ";;
        --quiet)        args="${args}-q ";;
        --verbose)      args="${args}-v ";;
        --help)         args="${args}-h ";;
        --left-garbage) args="${args}-g ";;
        --workdir)      args="${args}-w ";;

        # pass through anything else
        *) [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args}${delim}${arg}${delim} ";;
    esac
done

# Reset the positional parameters to the short options
eval set -- $args

# Default values
DEBUG="yes"

while getopts ":s:w:hgqv" option 2>/dev/null; do
    case $option in
        s)
        USER_SOURCE="${OPTARG[@]}"
        ;;

        w)
        WORKDIR="${OPTARG[@]}"
        ;;

        q)
        DEBUG="no"
        ;;

        v)
        DEBUG="yes"
        ;;

        h)
        showHelp
        exit 1
        ;;

        *)
        echo "[perfexpert.sh] Error: unrecognized option: ${OPTARG}"
        exit 1
        ;;
    esac
done
shift $(($OPTIND - 1))

USER_BINARY=${*}

VERBOSE="/dev/stdout"
LOGFILE="${WORKDIR}/perfexpert.log"

# Sanity checks
if [ ${#} -lt 1 ]; then
    showHelp
    exit 1
fi

###############################################################################
# Script variables
#
# Install directories
#
PERFEXPERT_PREFIX="@prefix@"
PERFEXPERT_BINDIR="@prefix@/bin"
PERFEXPERT_LIBDIR="@prefix@/lib"
PERFEXPERT_ETCDIR="@prefix@/etc"
PERFEXPERT_VARDIR="@prefix@/var"
#
# Path to tools
#
PERFEXPERT_RUN_EXP="${PERFEXPERT_BINDIR}/perfexpert_run_exp"
ANALYZER="${PERFEXPERT_BINDIR}/analyzer"
RECOMMENDER="${PERFEXPERT_BINDIR}/recommender"
PERFEXPERT_PR="${PERFEXPERT_BINDIR}/perfexpert_pr"
PERFEXPERT_CT="${PERFEXPERT_BINDIR}/perfexpert_ct"
PERFEXPERT_CI="${PERFEXPERT_BINDIR}/perfexpert_ci"

ROUND=0
ORIGINAL_WORKDIR=${WORKDIR}

while [ 1 ]; do
    # Which round is this? Update variables!
    ROUND=$(($ROUND + 1))
    WORKDIR="${ORIGINAL_WORKDIR}/${ROUND}"
    CI_OUTPUT_DIR="${WORKDIR}/fragments/new"

    # Create temporary dir
    eval @MKDIR_P@ ${WORKDIR}
    if [ 0 != $? ]; then
        echo "[perfexpert.sh] Error: unable to create directory (${WORKDIR})"
        exit 1
    fi
    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] Creating dir: ${WORKDIR}" >> ${LOGFILE}
        echo "[perfexpert.sh] @MKDIR_P@ ${WORKDIR}" >> ${LOGFILE}
    fi

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[perfexpert.sh] DEBUG=${DEBUG}" >> ${LOGFILE}
        echo "[perfexpert.sh] USER_SOURCE=${USER_SOURCE}" >> ${LOGFILE}
        echo "[perfexpert.sh] USER_BINARY=${USER_BINARY}" >> ${LOGFILE}
        echo "[perfexpert.sh] WORKDIR=${WORKDIR}" >> ${LOGFILE}
        echo "[perfexpert.sh] LOGFILE=${WORKDIR}/perfexpert.log" >> ${LOGFILE}
        echo "[perfexpert.sh] CI_OUTPUT_DIR=${CI_OUTPUT_DIR}" >> ${LOGFILE}
        echo "[perfexpert.sh]" >> ${LOGFILE}
    fi

    # Run the tools
    compile
    perfexpert_run_exp
    analyzer
    recommender
    perfexpert_pr
    perfexpert_ct
    perfexpert_ci

    echo "[perfexpert.sh] The new source code is in: ${CI_OUTPUT_DIR}"

    mv ${CI_OUTPUT_DIR}/${USER_SOURCE}.new ${CI_OUTPUT_DIR}/${USER_SOURCE}
    USER_SOURCE="${CI_OUTPUT_DIR}/${USER_SOURCE}"
done

#!@BASH_PROGRAM@
#
# Copyright (c) 2013  University of Texas at Austin. All rights reserved.
#
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# This file is part of PerfExpert.
#
# PerfExpert is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PerfExpert is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PerfExpert. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Leonardo Fialho
#
# $HEADER$
#

# TODO:
#
# 1) Receive compiler/compilation flags as parameters
# 2) Create the unique identifier for opttran run
# 3) Insert such identifier on tools arguments
# 4) ...

###############################################################################
<<<<<<< HEAD:tools/opttran.sh.in
#         12345678901234567890123456789012345678901234567890123456789012345678901234567890
showHelp() {
    echo "Usage: opttran [-ghvq] [-w DIR] [-s FILE] program_executable [program_arguments]"
    echo
    echo "  -s --source FILE    Use FILE as the source code"
    echo "  -q --quiet          Disable verbose mode"
    echo "  -v --verbose        Enable verbose mode"
    echo "  -w --workdir DIR    Use DIR as temporary directory"
    echo "  -g --left-garbage   Do not remove the temporary directory"
    echo "  -h --help           Show this message"
}

###############################################################################
perfexpert_run_exp() {
#
# Set 'perfexpert_run_exp' up
#
OPTTRAN_PERFEXPERT_RUN_EXP_CMD="${OPTTRAN_PERFEXPERT_RUN_EXP}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -t ${OPTTRAN_DIR}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -g"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" -o ${OPTTRAN_DIR}/perfexpert-experiment.xml"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" ${USER_BINARY}"
OPTTRAN_PERFEXPERT_RUN_EXP_CMD+=" &> ${OPTTRAN_DIR}/perfexpert_run_exp.output.txt"
#
# Run PerfExpert (run_exp)
echo -n "[opttran.sh] Step 1 of 7: Running PerfExpert measurements phase (this could take a while)..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_PERFEXPERT_RUN_EXP_CMD}" >> ${LOGFILE}
fi
eval ${OPTTRAN_PERFEXPERT_RUN_EXP_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[opttran.sh] Error: running PerfExpert (run_exp)" >> ${LOGFILE}
    echo "[opttran.sh] Error: running PerfExpert (run_exp)"
    exit 1
fi
}
=======
# Parsing options
#
# -q quiet
# -s source file
# -v enable verbose debug
# -b binary program file (not sure if it is necessary)

WORKDIR="teste"
USER_BINARY="mm_naive"
USER_SOURCE="mm_naive.c"
DEBUG="yes"
#VERBOSE="/dev/null"
VERBOSE="/dev/stdout"
LOGFILE="${WORKDIR}/perfexpert.log"
CI_OUTPUT_DIR="${WORKDIR}/fragments/1"













###############################################################################
# Script variables
#
# Install directories
#
PERFEXPERT_PREFIX="@prefix@"
PERFEXPERT_BINDIR="@prefix@/bin"
PERFEXPERT_LIBDIR="@prefix@/lib"
PERFEXPERT_ETCDIR="@prefix@/etc"
PERFEXPERT_VARDIR="@prefix@/var"
#
# Path to tools
#
ANALYZER_RUN_EXP="${PERFEXPERT_BINDIR}/analyzer_run_exp"
ANALYZER="${PERFEXPERT_BINDIR}/analyzer"
RECOMMENDER="${PERFEXPERT_BINDIR}/recommender"
PR="${PERFEXPERT_BINDIR}/pr"
CT="${PERFEXPERT_BINDIR}/ct"
CI="${PERFEXPERT_BINDIR}/ci"

###############################################################################
# Set 'analyzerrun_exp' up
#
# Usage: analyzerrun_exp [-ngh] [-t DIR] [-s FILE] [-o FILE] program_executable
#                           [program_arguments]
#
#  -s --structure FILE  Use FILE as program structure (generated by hpcstruct)
#  -o --output FILE     Save measurements to FILE
#  -n --no-debug        Do not switch to debug mode if program fails to execute
#                       with PerfExpert
#  -g --left-garbage    Do not remove the temporary directory
#  -t --tempdir DIR     Use DIR as temporary directory. The content in this
#                       directory will be erased before using it (!! WARNING !!)
#  -h --help            Show this message
#
ANALYZER_RUN_EXP_CMD="${ANALYZER_RUN_EXP}"
ANALYZER_RUN_EXP_CMD+=" -t ${WORKDIR}"
ANALYZER_RUN_EXP_CMD+=" -g"
ANALYZER_RUN_EXP_CMD+=" -o ${WORKDIR}/perfexpert-experiment.xml"
ANALYZER_RUN_EXP_CMD+=" ${USER_BINARY}"
ANALYZER_RUN_EXP_CMD+=" &> ${WORKDIR}/analyzer_run_exp.output"
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in

###############################################################################
perfexpert() {
#
<<<<<<< HEAD:tools/opttran.sh.in
# Set 'perfexpert' up
#
OPTTRAN_PERFEXPERT_CMD="${OPTTRAN_PERFEXPERT}"
OPTTRAN_PERFEXPERT_CMD+=" --recommend"
OPTTRAN_PERFEXPERT_CMD+=" --opttran"
OPTTRAN_PERFEXPERT_CMD+=" 0.1"
OPTTRAN_PERFEXPERT_CMD+=" ${OPTTRAN_DIR}/perfexpert-experiment.xml"
OPTTRAN_PERFEXPERT_CMD+=" &> ${OPTTRAN_DIR}/perfexpert.output.txt"
#
OPTTRAN_PERFEXPERT_CMD2="${OPTTRAN_PERFEXPERT}"
OPTTRAN_PERFEXPERT_CMD2+=" 0.1"
OPTTRAN_PERFEXPERT_CMD2+=" ${OPTTRAN_DIR}/perfexpert-experiment.xml"
OPTTRAN_PERFEXPERT_CMD2+=" &> ${OPTTRAN_DIR}/perfexpert_analysis.output.txt"
#
# Run PerfExpert (analysis)
echo -n "[opttran.sh] Step 2 of 7: Running PerfExpert analysis phase..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${OPTTRAN_PERFEXPERT_CMD2}" >> ${LOGFILE}
fi
eval ${OPTTRAN_PERFEXPERT_CMD2}
=======
# <threshold>                            Threshold between 0 and 1
# <experiment.xml>                       experiment.xml file generated using
#                                        `analyzer_run_exp'
# [<experiment.xml>]                     Second experiment.xml file, for
#                                        comparison only. Not valid with -r
#
ANALYZER_CMD="${PERFEXPERT}"
ANALYZER_CMD+=" --recommend"
ANALYZER_CMD+=" --opttran"
ANALYZER_CMD+=" 0.1"
ANALYZER_CMD+=" ${WORKDIR}/perfexpert-experiment.xml"
ANALYZER_CMD+=" &> ${WORKDIR}/perfexpert.output"

###############################################################################
# Set 'recommender' up
#
# Usage: recommender -i|-f file [-o file] [-d database] [-m file] [-nvch] [-p pid]
#                    [-a dir] [-s file] [-l level]
#  -i --stdin           Use STDIN as input for performance measurements
#  -f --inputfile       Use 'file' as input for performance measurements
#  -o --outputfile      Use 'file' as output for recommendations (default stdout)
#                       if the file exists its content will be overwritten
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -m --metricfile      Use 'file' to define metrics different from the default
#  -n --newmetrics      Do not use the system metrics table. A temporary table
#                       will be created using the default metrics file:
#                       /home/fialho/opttran/etc/recommender-metrics.txt
#  -r --recommendations Number of recommendation to show
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -s --sourcefile      Use 'file' to extract source code fragments identified as
#                       bootleneck by PerfExpert (this option sets -a argument)
#  -p --opttranid       Use 'pid' to identify consecutive calls to Recommender.
#                       This argument is set automatically when using OptTran
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
RECOMMENDER_CMD="${RECOMMENDER}"
RECOMMENDER_CMD+=" --verbose_level 10"
RECOMMENDER_CMD+=" --inputfile ${WORKDIR}/perfexpert.output"
RECOMMENDER_CMD+=" --colorful"
RECOMMENDER_CMD+=" --opttran ${WORKDIR}"
RECOMMENDER_CMD+=" --sourcefile ${USER_SOURCE}"
RECOMMENDER_CMD+=" &> ${WORKDIR}/recommender.output"

###############################################################################
# Set 'pr' up
#
# Usage: pr -i|-f file [-o file] [-tvch] [-l level] [-a dir] [-p pid]
#                   [-d database]
#  -i --stdin           Use STDIN as input for patterns
#  -f --inputfile       Use 'file' as input for patterns
#  -o --outputfile      Use 'file' as output (default stdout)
#  -t --testall         Test all the pattern recognizers of each code fragment,
#                       otherwise stop on the first valid one
#  -a --opttran         Create OptTran (automatic performance optimization) files
#                       into 'dir' directory (default: create no OptTran files).
#                       This argument overwrites -o (no output on STDOUT, except
#                       for verbose messages)
#  -d --database        Select the recommendation database file
#                       (default: /home/fialho/opttran/var/recommendation.db)
#  -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
#  -v --verbose         Enable verbose mode using default verbose level (5)
#  -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
#  -c --colorful        Enable colors on verbose mode, no weird characters will
#                       appear on output files
#  -h --help            Show this message
#
PR_CMD="${PR}"
PR_CMD+=" --verbose_level 10"
PR_CMD+=" --colorful"
PR_CMD+=" --inputfile ${WORKDIR}/recommendations.txt"
PR_CMD+=" --testall"
PR_CMD+=" --opttran ${WORKDIR}"
PR_CMD+=" &> ${WORKDIR}/pr.output"

###############################################################################
# Set 'ct' up
#
# Usage: ct -i|-f file [-o file] [-vch] [-l level] [-a dir] [-d database]
#                   [-p pid]
# -i --stdin           Use STDIN as input for patterns
# -f --inputfile       Use 'file' as input for patterns
# -o --outputfile      Use 'file' as output (default stdout)
# -a --opttran         Create OptTran (automatic performance optimization) files
#                      into 'dir' directory (default: create no OptTran files).
#                      This argument overwrites -o (no output on STDOUT, except
#                      for verbose messages)
# -t --transfall       Apply all possible transformation to each fragments (not
#                      recommended, some transformations are not compatible)
# -d --database        Select the recommendation database file
#                      (default: /home/fialho/opttran/var/recommendation.db)
# -p --opttranid       Use 'pid' to log on DB consecutive calls to Recommender
# -v --verbose         Enable verbose mode using default verbose level (5)
# -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
# -c --colorful        Enable colors on verbose mode, no weird characters will
#                      appear on output files
# -h --help            Show this message
#
CT_CMD="${CT}"
CT_CMD+=" --verbose_level 10"
CT_CMD+=" --colorful"
CT_CMD+=" --inputfile ${WORKDIR}/transformations.txt"
CT_CMD+=" --opttran ${WORKDIR}"
CT_CMD+=" &> ${WORKDIR}/ct.output"

###############################################################################
# Set 'ci' up
#
# Usage: ci -i|-f file -o dir [-vch] [-l level] [-a dir]
# -i --stdin           Use STDIN as input for patterns
# -f --inputfile       Use 'file' as input for patterns
# -o --outputdir       Use 'dir' as outpur directory for integrated source code
# -a --opttran         Create OptTran (automatic performance optimization) files
#                      into 'dir' directory (default: create no OptTran files).
# -v --verbose         Enable verbose mode using default verbose level (5)
# -l --verbose_level   Enable verbose mode using a specific verbose level (1-10)
# -c --colorful        Enable colors on verbose mode, no weird characters will
#                      appear on output files
# -h --help            Show this message
#
CI_CMD="${CI}"
CI_CMD+=" --verbose_level 10"
CI_CMD+=" --colorful"
CI_CMD+=" --inputfile ${WORKDIR}/functions.txt"
CI_CMD+=" --opttran ${WORKDIR}"
CI_CMD+=" --outputdir ${CI_OUTPUT_DIR}"
CI_CMD+=" &> ${WORKDIR}/ci.output"

###############################################################################
# It's time to make magic...
#

# Create OPTTRAN dir
eval @MKDIR_P@ ${WORKDIR}
if [ 0 != $? ]; then
    echo "[perfexpert.sh] Error: unable to create OPTTRAN directory (${WORKDIR})"
    exit 1
fi
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Creating dir: ${WORKDIR}" >> ${LOGFILE}
    echo "[perfexpert.sh] @MKDIR_P@ ${WORKDIR}" >> ${LOGFILE}
fi

# Run PerfExpert (run_exp)
echo -n "[perfexpert.sh] Step 1 of 6: Running PerfExpert measurements phase (this could take a while)..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${ANALYZER_RUN_EXP_CMD}" >> ${LOGFILE}
fi
eval ${ANALYZER_RUN_EXP_CMD}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
<<<<<<< HEAD:tools/opttran.sh.in
    echo "[opttran.sh] Error: running PerfExpert (analysis)" >> ${LOGFILE}
    echo "[opttran.sh] Error: running PerfExpert (analysis)"
    exit 1
fi

# Run PerfExpert (recommend)
echo -n "[opttran.sh] Step 3 of 7: Running PerfExpert recommend phase..." >> ${VERBOSE}
=======
    echo "[perfexpert.sh] Error: running PerfExpert (run_exp)" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PerfExpert (run_exp)"
    exit 1
fi

# Run PerfExpert (analysis)
echo -n "[perfexpert.sh] Step 2 of 6: Running PerfExpert analysis phase..." >> ${VERBOSE}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${ANALYZER_CMD}" >> ${LOGFILE}
fi
eval ${ANALYZER_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
<<<<<<< HEAD:tools/opttran.sh.in
    echo "[opttran.sh] Error: running PerfExpert (recommend)" >> ${LOGFILE}
    echo "[opttran.sh] Error: running PerfExpert (recommend)"
=======
    echo "[perfexpert.sh] Error: running PerfExpert (analysis)" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PerfExpert (analysis)"
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
    exit 1
fi

# Clean PerfExpert perfexpert.log
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Moving: perfexpert.log to ${WORKDIR}/" >> ${LOGFILE}
fi
eval mv perfexpert.log ${WORKDIR}/
if [ 0 != $? ]; then
    echo "[perfexpert.sh] Error: unable to move perfexpert.log" >> ${LOGFILE}
fi
}

###############################################################################
recommender() {
# Set 'recommender' up
#
OPTTRAN_RECOMMENDER_CMD="${OPTTRAN_RECOMMENDER}"
OPTTRAN_RECOMMENDER_CMD+=" --verbose_level 10"
OPTTRAN_RECOMMENDER_CMD+=" --inputfile ${OPTTRAN_DIR}/perfexpert.output.txt"
OPTTRAN_RECOMMENDER_CMD+=" --colorful"
OPTTRAN_RECOMMENDER_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_RECOMMENDER_CMD+=" --sourcefile ${USER_SOURCE}"
OPTTRAN_RECOMMENDER_CMD+=" &> ${OPTTRAN_DIR}/recommender.output.txt"
#
# Run Recommender
<<<<<<< HEAD:tools/opttran.sh.in
echo -n "[opttran.sh] Step 4 of 7: Looking for recommendations..." >> ${VERBOSE}
=======
echo -n "[perfexpert.sh] Step 3 of 6: Looking for recommendations..." >> ${VERBOSE}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${RECOMMENDER_CMD}" >> ${LOGFILE}
fi
eval ${RECOMMENDER_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running Recommender" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running Recommender"
    exit 1
fi
}

###############################################################################
opttran_pr() {
#
# Set 'opttran_pr' up
#
OPTTRAN_PR_CMD="${OPTTRAN_PR}"
OPTTRAN_PR_CMD+=" --verbose_level 10"
OPTTRAN_PR_CMD+=" --colorful"
OPTTRAN_PR_CMD+=" --inputfile ${OPTTRAN_DIR}/opttran_recommendations.txt"
OPTTRAN_PR_CMD+=" --testall"
OPTTRAN_PR_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_PR_CMD+=" &> ${OPTTRAN_DIR}/opttran_pr.output.txt"
#
# Run the Pattern Recognizer
<<<<<<< HEAD:tools/opttran.sh.in
echo -n "[opttran.sh] Step 5 of 7: Testing feasibility of recommendations..." >> ${VERBOSE}
=======
echo -n "[perfexpert.sh] Step 4 of 6: Testing feasibility of recommendations..." >> ${VERBOSE}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${PR_CMD}" >> ${LOGFILE}
fi
eval ${PR_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
<<<<<<< HEAD:tools/opttran.sh.in
    echo "[opttran.sh] Error: running OptTran:PR, calling recommender" >> ${LOGFILE}
    echo "[opttran.sh] Sorry, we ran out of automatic transformations."
    echo "[opttran.sh] Here are some optimizations we recommend:"
    ${OPTTRAN_RECOMMENDER} --inputfile ${OPTTRAN_DIR}/perfexpert.output.txt
=======
    echo "[perfexpert.sh] Error: running PR" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running PR"
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
    exit 1
fi
}

###############################################################################
opttran_ct() {
#
# Set 'opttran_ct' up
#
OPTTRAN_CT_CMD="${OPTTRAN_CT}"
OPTTRAN_CT_CMD+=" --verbose_level 10"
OPTTRAN_CT_CMD+=" --colorful"
OPTTRAN_CT_CMD+=" --inputfile ${OPTTRAN_DIR}/opttran_transformations.txt"
OPTTRAN_CT_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_CT_CMD+=" &> ${OPTTRAN_DIR}/opttran_ct.output.txt"
#
# Run the Code Transformer
<<<<<<< HEAD:tools/opttran.sh.in
echo -n "[opttran.sh] Step 6 of 7: Applying code transformations..." >> ${VERBOSE}
=======
echo -n "[perfexpert.sh] Step 5 of 6: Applying code transformations..." >> ${VERBOSE}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${CT_CMD}" >> ${LOGFILE}
fi
eval ${CT_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running CT" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running CT"
    exit 1
fi
}

###############################################################################
opttran_ci() {
# Set 'opttran_ci' up
#
OPTTRAN_CI_CMD="${OPTTRAN_CI}"
OPTTRAN_CI_CMD+=" --verbose_level 10"
OPTTRAN_CI_CMD+=" --colorful"
OPTTRAN_CI_CMD+=" --inputfile ${OPTTRAN_DIR}/opttran_functions.txt"
OPTTRAN_CI_CMD+=" --opttran ${OPTTRAN_DIR}"
OPTTRAN_CI_CMD+=" --outputdir ${OPTTRAN_CI_OUTPUT_DIR}"
OPTTRAN_CI_CMD+=" &> ${OPTTRAN_DIR}/opttran_ci.output.txt"
#
# Run the Code Integrator
<<<<<<< HEAD:tools/opttran.sh.in
echo -n "[opttran.sh] Step 7 of 7: Integrating application source code..." >> ${VERBOSE}
=======
echo -n "[perfexpert.sh] Step 6 of 6: Integrating application source code..." >> ${VERBOSE}
>>>>>>> bb5b994266e61416c518dd212821f7e4594bea4c:tools/perfexpert.sh.in
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[perfexpert.sh] Running: ${CI_CMD}" >> ${LOGFILE}
fi
eval ${CI_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[perfexpert.sh] Error: running CI" >> ${LOGFILE}
    echo "[perfexpert.sh] Error: running CI"
    exit 1
fi
}

###############################################################################
compile() {
#
COMPILE_CMD="gcc -g -O3 -o ${USER_BINARY} ${USER_SOURCE}"
#
echo -n "[opttran.sh] Compiling..." >> ${VERBOSE}
if [ x"${DEBUG}" == x"yes" ]; then
    echo "[opttran.sh] Running: ${COMPILE_CMD}" >> ${LOGFILE}
fi
eval ${COMPILE_CMD}
if [ 0 == $? ]; then
    echo " ok!" >> ${VERBOSE}
else
    echo " fail :(" >> ${VERBOSE}
    echo "[opttran.sh] Error: compiling code" >> ${LOGFILE}
    echo "[opttran.sh] Error: compiling code"
    exit 1
fi
}

###############################################################################
# Parsing options
#
for arg; do
    delim=""
    case "$arg" in
        # translate GNU long options to short options
        --source)       args="${args}-s ";;
        --quiet)        args="${args}-q ";;
        --verbose)      args="${args}-v ";;
        --help)         args="${args}-h ";;
        --left-garbage) args="${args}-g ";;
        --workdir)      args="${args}-w ";;

        # pass through anything else
        *) [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args}${delim}${arg}${delim} ";;
    esac
done

# Reset the positional parameters to the short options
eval set -- $args

# Default values
DEBUG="yes"

while getopts ":s:w:hgqv" option 2>/dev/null; do
    case $option in
        s)
        USER_SOURCE="${OPTARG[@]}"
        ;;

        w)
        OPTTRAN_DIR="${OPTARG[@]}"
        ;;

        q)
        DEBUG="no"
        ;;

        v)
        DEBUG="yes"
        ;;

        h)
        showHelp
        exit 1
        ;;

        *)
        echo "[opttran] Error: unrecognized option: ${OPTARG}"
        exit 1
        ;;
    esac
done
shift $(($OPTIND - 1))

USER_BINARY=${*}

VERBOSE="/dev/stdout"
LOGFILE="${OPTTRAN_DIR}/opttran.log"

# Sanity checks
if [ ${#} -lt 1 ]; then
    showHelp
    exit 1
fi

###############################################################################
# Script variables
#
# Install directories
#
OPTTRAN_PREFIX="@prefix@"
OPTTRAN_BINDIR="@prefix@/bin"
OPTTRAN_LIBDIR="@prefix@/lib"
OPTTRAN_ETCDIR="@prefix@/etc"
OPTTRAN_VARDIR="@prefix@/var"
#
# Path to tools
#
OPTTRAN_PERFEXPERT_RUN_EXP="${OPTTRAN_BINDIR}/perfexpert_run_exp"
OPTTRAN_PERFEXPERT="${OPTTRAN_BINDIR}/perfexpert"
OPTTRAN_RECOMMENDER="${OPTTRAN_BINDIR}/recommender"
OPTTRAN_PR="${OPTTRAN_BINDIR}/opttran_pr"
OPTTRAN_CT="${OPTTRAN_BINDIR}/opttran_ct"
OPTTRAN_CI="${OPTTRAN_BINDIR}/opttran_ci"

ROUND=0
ORIGINAL_OPTTRAN_DIR=${OPTTRAN_DIR}

while [ 1 ]; do
    # Which round is this? Update variables!
    ROUND=$(($ROUND + 1))
    OPTTRAN_DIR="${ORIGINAL_OPTTRAN_DIR}/${ROUND}"
    OPTTRAN_CI_OUTPUT_DIR="${OPTTRAN_DIR}/fragments/new"

    # Create OPTTRAN dir
    eval @MKDIR_P@ ${OPTTRAN_DIR}
    if [ 0 != $? ]; then
        echo "[opttran.sh] Error: unable to create OPTTRAN directory (${OPTTRAN_DIR})"
        exit 1
    fi
    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[opttran.sh] Creating dir: ${OPTTRAN_DIR}" >> ${LOGFILE}
        echo "[opttran.sh] @MKDIR_P@ ${OPTTRAN_DIR}" >> ${LOGFILE}
    fi

    if [ x"${DEBUG}" == x"yes" ]; then
        echo "[opttran.sh] DEBUG=${DEBUG}" >> ${LOGFILE}
        echo "[opttran.sh] USER_SOURCE=${USER_SOURCE}" >> ${LOGFILE}
        echo "[opttran.sh] USER_BINARY=${USER_BINARY}" >> ${LOGFILE}
        echo "[opttran.sh] OPTTRAN_DIR=${OPTTRAN_DIR}" >> ${LOGFILE}
        echo "[opttran.sh] LOGFILE=${OPTTRAN_DIR}/opttran.log" >> ${LOGFILE}
        echo "[opttran.sh] OPTTRAN_CI_OUTPUT_DIR=${OPTTRAN_CI_OUTPUT_DIR}" >> ${LOGFILE}
        echo "[opttran.sh]" >> ${LOGFILE}
    fi

    # Run the tools
    compile
    perfexpert_run_exp
    perfexpert
    recommender
    opttran_pr
    opttran_ct
    opttran_ci

    echo "[opttran.sh] The new source code is in: ${OPTTRAN_CI_OUTPUT_DIR}"

    mv ${OPTTRAN_CI_OUTPUT_DIR}/${USER_SOURCE}.new ${OPTTRAN_CI_OUTPUT_DIR}/${USER_SOURCE}
    USER_SOURCE="${OPTTRAN_CI_OUTPUT_DIR}/${USER_SOURCE}"
done

PerfExpert Optimization Suggestions Database
============================================

/*
Copyright (c) 2013, Texas State University-San Marcos.  All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

   * Redistributions of the source must retain the above copyright notice, 
     this list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
   * Neither the name of Texas State University-San Marcos nor the names of its
     contributors may be used to endorse or promote products derived from this
     software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

Authors: Martin Burtscher and Olalekan Sopeju
*/

Database Format:
----------------
Optimization Suggestion Description comes first, then a line of "-----",
then the corresponding Explanation, then a line of "-----", then the
corresponding Code Samples, then a line of "-----", then the
corresponding Compiler Flags, then a line of "-----", then the
corresponding Attributes List, then a line of "....." to indicate end of
the optimization suggestion.

BEGIN-DBeliminate common subexpressions involving memory accesses
--------------------------------------------------------------------------------
This optimization reduces the number of executed (slow) memory accesses.
--------------------------------------------------------------------------------
d[i] = a * b[i] + c[i];
y[i] = a * b[i] + x[i];
 =====>
temp = a * b[i];
d[i] = temp + c[i];
y[i] = temp + x[i];
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L1
................................................................................

eliminate floating-point operations through distributivity
--------------------------------------------------------------------------------
This optimization reduces the number of executed floating-point operations.
--------------------------------------------------------------------------------
d[i] = a[i] * b[i] + a[i] * c[i];
 =====>
d[i] = a[i] * (b[i] + c[i]);
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-fast
fpt-slow
................................................................................

eliminate floating-point operations through associativity
--------------------------------------------------------------------------------
This optimization reduces the number of executed floating-point operations.
--------------------------------------------------------------------------------
d[i] = a[i] * b[i] * c[i];
y[i] = x[i] * a[i] * b[i];
 =====>
temp = a[i] * b[i];
d[i] = temp * c[i];
y[i] = x[i] * temp;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-fast
fpt-slow
................................................................................

move loop invariant computations out of loop
--------------------------------------------------------------------------------
This optimization reduces the number of executed floating-point operations.
--------------------------------------------------------------------------------
loop i {
  x = x + a * b * c[i];
}
 =====>
temp = a * b;
loop i {
  x = x + temp * c[i];
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-fast
fpt-slow
loop1
................................................................................

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
use the "-prec-div", "-prec-sqrt", "-pc32", "-fp-speculation=fast", and/or
"-fp-model fast=2" compiler flags
--------------------------------------------------------------------------------
fpt-slow
................................................................................

use float instead of double data type if loss of precision is acceptable
--------------------------------------------------------------------------------
This optimization reduces the amount of memory required to store floating-point
data, which often makes accessing the data faster.
--------------------------------------------------------------------------------
double a[n];
 =====>
float a[n];
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-slow
d-L1
................................................................................

compare squared values instead of computing the square root
--------------------------------------------------------------------------------
This optimization replaces a slow operation with equivalent but much faster
operations.
--------------------------------------------------------------------------------
if (x < sqrt(y)) {...}
 =====>
if ((x < 0.0) || (x*x < y)) {...}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-slow
................................................................................

compute the reciprocal outside of loop and use multiplication inside the loop
--------------------------------------------------------------------------------
This optimization replaces many slow operations with one slow and many fast
operations that accomplish the same.
--------------------------------------------------------------------------------
loop i {
  a[i] = b[i] / c;
}
 =====>
cinv = 1.0 / c;
loop i {
  a[i] = b[i] * cinv;
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-slow
loop1
................................................................................

accumulate and then normalize instead of normalizing each element
--------------------------------------------------------------------------------
This optimization replaces many slow operations with a single slow operation
that accomplishes the same.
--------------------------------------------------------------------------------
loop i {
  x = x + a[i] / b;
}
 =====>
loop i {
  x = x + a[i];
}
x = x / b;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
fpt-slow
loop1
................................................................................

use trivial assignments inside THEN/ELSE to allow the use of conditional moves
--------------------------------------------------------------------------------
This optimization may allow the compiler to replace a code sequence with an
equivalent but faster code sequence that uses no branches.
--------------------------------------------------------------------------------
if (x < y)
  a = x + y;
 =====>
temp = x + y;
if (x < y)
  a = temp;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
................................................................................

express Boolean logic in form of integer computation
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
is faster because fewer branches are executed.
--------------------------------------------------------------------------------
if ((a == 0) && (b == 0) && (c == 0)) {...}
 =====>
if ((a | b | c) == 0) {...}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
................................................................................

remove IF
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
may be faster because no branches are needed.
--------------------------------------------------------------------------------
/* x is 0 or -1 */
if (x == 0)
  a = b;
else
  a = c;
 =====>
a = (b & ~x) | (c & x);
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
................................................................................

unroll loops (more)
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
is faster because fewer branches are executed.
--------------------------------------------------------------------------------
loop i {
  a[i] = a[i] * b[i];
}
 =====>
loop i step 2 {
  a[i] = a[i] * b[i];
  a[i+1] = a[i+1] * b[i+1];
}
--------------------------------------------------------------------------------
use the "-funroll-loops" compiler flag
--------------------------------------------------------------------------------
br-i
loop1
................................................................................

move a loop around a subroutine call into the subroutine
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
is faster because fewer calls are executed.
--------------------------------------------------------------------------------
f(x) {...x...};
loop i {
  f(a[i]);
}
 =====>
f(x[]) {
  loop j {
    ...x[j]...
  }
};
f(a);
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
loop1
................................................................................

move loop invariant tests out of loop
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
is faster because fewer branches are executed.
--------------------------------------------------------------------------------
loop i {
  if (x < y)
    a[i] = x * b[i];
  else
    a[i] = y * b[i];
}
 =====>
if (x < y) {
  loop i {
    a[i] = x * b[i];
  }
} else {
  loop i {
    a[i] = y * b[i];
  }
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
loop1
................................................................................

special-case the most often used loop count(s)
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent sequence that is
faster because fixed loop boundaries often enable better compiler optimizations.
--------------------------------------------------------------------------------
for (i = 0; i < n; i++) {...}
 =====>
if (n == 4) {
  for (i = 0; i < 4; i++) {...}
} else {
  for (i = 0; i < n; i++) {...}
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
br-i
loop1
................................................................................

use inlining
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
is faster because fewer control transfers are executed.
--------------------------------------------------------------------------------
float f(float x) {
  return x * x;
}
z = f(y);
 =====>
z = y * y;
--------------------------------------------------------------------------------
use the "-inline-forceinline", "-finline", "-finline-functions", or
"-finline-limit=<n>" (with a large <n>) compiler flags
--------------------------------------------------------------------------------
i-tlb
................................................................................

change the order of subroutine calls
--------------------------------------------------------------------------------
This optimization, when allowed, may yield faster execution when it results in
more opportunity for compiler optimizations.
--------------------------------------------------------------------------------
f(); h();
 =====>
h(); f();
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-tlb
multiple_functions
................................................................................

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
use the "-falign-functions" compiler flag
--------------------------------------------------------------------------------
i-tlb
................................................................................

factor out sequences of common code into subroutines
--------------------------------------------------------------------------------
This optimization reduces the code size, which may improve the instruction cache
performance.
--------------------------------------------------------------------------------
same_code;
same_code;
 =====>
void f() {same_code;}
f();
f();
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-access
boost
................................................................................

sort subroutines by call chains (subroutine coloring)
--------------------------------------------------------------------------------
This optimization moves functions to potentially better starting addresses in
memory.
--------------------------------------------------------------------------------
f() {...}
g() {...}
h() {...}
loop {
  f();
  h();
}
 =====>
g() {...}
f() {...}
h() {...}
loop {
  f();
  h();
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-tlb
i-access
multiple_functions
................................................................................

lower the loop unroll factor
--------------------------------------------------------------------------------
This optimization reduces the code size, which may improve the instruction cache
performance.
--------------------------------------------------------------------------------
loop i step 4 {
  code_i;
  code_i+1;
  code_i+2;
  code_i+3;
}
 =====>
loop i step 2 {
  code_i;
  code_i+1;
}
--------------------------------------------------------------------------------
use the "-no-unroll-aggressive" compiler flag
--------------------------------------------------------------------------------
i-access
loop1
................................................................................

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
use the "-nolib-inline", "-fno-inline", "-fno-inline-functions", or
"-finline-limit=<n>" (with a small <n>) compiler flags
--------------------------------------------------------------------------------
i-access
................................................................................

make subroutines more general and use them more
--------------------------------------------------------------------------------
This optimization reduces the code size, which may improve the instruction cache
performance.
--------------------------------------------------------------------------------
void f() {
  statements1;
  statementsX;
}
void g() {
  statements2;
  statementsX;
}
 =====>
void fg(int flag) {
  if (flag) {
    statements1;
  } else {
    statements2;
  }
  statementsX;
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-access
multiple_functions
................................................................................

split off cold code into separate subroutines and place them at end of file
--------------------------------------------------------------------------------
This optimization separates rarely from frequently used code, which may improve
the instruction cache performance.
--------------------------------------------------------------------------------
if (unlikely_condition) {
  lots_of_code
}
 =====>
void f() {lots_of_code}
...
if (unlikely_condition)
  f();
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-access
................................................................................

use trace scheduling to reduce the branch taken frequency
--------------------------------------------------------------------------------
This optimization replaces a code sequence with an equivalent code sequence that
may be faster because it reduces (taken) branches and may enable better compiler
optimizations.
--------------------------------------------------------------------------------
if (likely_condition)
  f();
else
  g();
h();
 =====>
if (!likely_condition) {
  g(); h();
} else {
  f(); h();
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
i-access
multiple_functions
................................................................................

move loop invariant memory accesses out of loop
--------------------------------------------------------------------------------
This optimization reduces the number of executed (slow) memory accesses.
--------------------------------------------------------------------------------
loop i {
  a[i] = b[i] * c[j]
}
 =====>
temp = c[j];
loop i {
  a[i] = b[i] * temp;
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L1
loop1
boost
................................................................................

compute values rather than loading them if doable with few operations
--------------------------------------------------------------------------------
This optimization replaces (slow) memory accesses with equivalent but faster
computations.
--------------------------------------------------------------------------------
loop i {
  t[i] = a[i] * 0.5;
}
loop i {
  a[i] = c[i] - t[i];
}
 =====>
loop i {
  a[i] = c[i] - (a[i] * 0.5);
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L2
d-mem
loop1
................................................................................

enable the use of vector instructions to transfer more data per access
--------------------------------------------------------------------------------
This optimization increases the memory bandwidth.
--------------------------------------------------------------------------------
align arrays, use only stride-one accesses, make loop count even (pad arrays)
struct {
  double a, b;
} s[127];
for (i = 0; i < 127; i++) {
  s[i].a = 0;
  s[i].b = 0;
}
 =====>
__declspec(align(16)) double a[128], b[128];
for (i = 0; i < 128; i++) {
  a[i] = 0;
  b[i] = 0;
}
--------------------------------------------------------------------------------
use the "-opt-streaming-stores always" compiler flag
--------------------------------------------------------------------------------
d-L1
loop1
................................................................................

copy data into local scalar variables and operate on the local copies
--------------------------------------------------------------------------------
This optimization replaces (slow) memory accesses with equivalent but faster
computations.
--------------------------------------------------------------------------------
x = a[i] * a[i];
...
a[i] = x / b;
...
b = a[i] + 1.0;
 =====>
t = a[i];
x = t * t;
...
a[i] = t = x / b;
...
b = t + 1.0;
--------------------------------------------------------------------------------
use the "-scalar-rep" compiler flag
--------------------------------------------------------------------------------
d-L1
................................................................................

align data, especially arrays and structs
--------------------------------------------------------------------------------
This optimization enables the use of vector instructions, which increase the
memory bandwidth.
--------------------------------------------------------------------------------
int x[1024];
 =====>
__declspec(align(16)) int x[1024];
--------------------------------------------------------------------------------
use the "-Zp16", "-malign-double", and/or "-malign-natural" compiler flags
--------------------------------------------------------------------------------
d-L1
................................................................................

help the compiler by marking pointers to non-overlapping data with "restrict"
--------------------------------------------------------------------------------
This optimization, when applicable, enables the compiler to tune the code more
aggressively.
--------------------------------------------------------------------------------
void *a, *b;
 =====>
void * restrict a, * restrict b;
--------------------------------------------------------------------------------
use the "-restrict" compiler flag
--------------------------------------------------------------------------------
d-L1
................................................................................

fuse multiple loops that access the same data
--------------------------------------------------------------------------------
This optimization enables the reuse of loaded data.
--------------------------------------------------------------------------------
loop i {
  a[i] = x[i];
}
loop i {
  b[i] = x[i] - 1;
}
 =====>
loop i {
  a[i] = x[i];
  b[i] = x[i] - 1;
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L2
d-mem
loop1
multiple_loops
................................................................................

change the order of loops
--------------------------------------------------------------------------------
This optimization may improve the memory access pattern and make it more cache
and TLB friendly.
--------------------------------------------------------------------------------
loop i {
  loop j {...}
}
 =====>
loop j {
  loop i {...}
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-tlb
d-mem
loop2
................................................................................

employ loop blocking and interchange
--------------------------------------------------------------------------------
This optimization may improve the memory access pattern and make it more cache
and TLB friendly.  Choose s such that s*s+2*s is less than the cache size.
--------------------------------------------------------------------------------
loop i {
  loop k {
    loop j {
      c[i][j] = c[i][j] + a[i][k] * b[k][j];
    }
  }
}
 =====>
loop k step s {
  loop j step s {
    loop i {
      for (kk = k; kk < k + s; kk++) {
        for (jj = j; jj < j + s; jj++) {
          c[i][jj] = c[i][jj] + a[i][kk] * b[kk][jj];
        }
      }
    }
  }
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-mem
loop3
................................................................................

unroll outer loop
--------------------------------------------------------------------------------
This optimization may reduce the number of (slow) memory accesses.
--------------------------------------------------------------------------------
loop i {
  loop j {
    a[i][j] = b[i][j] * c[j];
  }
}
 =====>
loop i step 4 {
  loop j {
    a[i][j] = b[i][j] * c[j];
    a[i+1][j] = b[i+1][j] * c[j];
    a[i+2][j] = b[i+2][j] * c[j];
    a[i+3][j] = b[i+3][j] * c[j];
  }
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L1
loop2
................................................................................

access arrays directly instead of using local copies
--------------------------------------------------------------------------------
This optimization reduces the memory footprint, which may improve cache
performance.
--------------------------------------------------------------------------------
loop j {
  a[j] = b[i][j][k];
}
...
loop j {
  ... a[j] ...
}
 =====>
loop j {
  ... b[i][j][k] ...
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L2
d-mem
loop1
................................................................................

reuse temporary arrays for different operations
--------------------------------------------------------------------------------
This optimization reduces the memory footprint, which may improve cache
performance.
--------------------------------------------------------------------------------
loop i {
  t1[i] = ...;
  ... t1[i] ...;
}
...
loop j {
  t2[j] = ...;
  ... t2[j] ...;
}
 =====>
loop i {
  t[i] = ...;
  ... t[i] ...;
}
...
loop j {
  t[j] = ...;
  ... t[j] ...;
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L2
d-mem
loop1
................................................................................

avoid unnecessary array updates
--------------------------------------------------------------------------------
This optimization reduces the number of memory writes.
--------------------------------------------------------------------------------
loop i {
  a[i] = ...;
  ... a[i] ...
}
// array a[] not read
 =====>
loop i {
  temp = ...;
  ... temp ...
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L2
d-mem
loop1
................................................................................

use smaller types (e.g., float instead of double or short instead of int)
--------------------------------------------------------------------------------
This optimization reduces the memory footprint, which may improve cache
performance.
--------------------------------------------------------------------------------
double a[n];
 =====>
float a[n];
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-tlb
d-mem
................................................................................

apply loop fission so every loop accesses just a couple of different arrays
--------------------------------------------------------------------------------
This optimization reduces the number of active memory pages, which may improve
DRAM performance.
--------------------------------------------------------------------------------
loop i {
  a[i] = a[i] * b[i] - c[i];
}
 =====>
loop i {
  a[i] = a[i] * b[i];
}
loop i {
  a[i] = a[i] - c[i];
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-mem
loop1
................................................................................

componentize important loops by factoring them into their own subroutines
--------------------------------------------------------------------------------
This optimization may allow the compiler to optimize the loop independently and
thus tune it better.
--------------------------------------------------------------------------------
loop i {...}
...
loop j {...}
 =====>
void li() {loop i {...}}
void lj() {loop j {...}}
...
li();
...
lj();
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-L1
d-L2
d-mem
loop1
................................................................................

split structs into hot and cold parts, where hot part has pointer to cold part
--------------------------------------------------------------------------------
This optimization separates rarely and frequently used data, which may improve
cache performance.
--------------------------------------------------------------------------------
struct s {
  hot_field;
  many_cold_fields;
} a[n];
 =====>
struct s_hot {
  hot_field;
  struct s_cold *ptr;
} a_hot[n];
struct s_cold {
  many_cold_fields;
} a_cold[n];
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-mem
................................................................................

pad memory areas so that temporal elements do not map to same set in cache
--------------------------------------------------------------------------------
This optimization reduces the chance of data overlap in the caches, which may
improve cache performance.  The final size of each array should be an integer
multiple of the cache line size (typically 64 bytes) but should not be a small
integer multiple of the cache size.
--------------------------------------------------------------------------------
double a[const * cache_size/8], b[const * cache_size/8];
loop i {
  ... a[i] + b[i] ...
}
 =====>
double a[const * cache_size/8 + 8], b[const * cache_size/8 + 8];
loop i {
  ... a[i] + b[i] ...
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-mem
loop1
................................................................................

allocate an array of elements instead of each element individually
--------------------------------------------------------------------------------
This optimization reduces the memory footprint and enhances spatial locality,
which may improve cache performance.
--------------------------------------------------------------------------------
loop {
  ... c = malloc(1); ...
}
 =====>
top = n;
loop {
  if (top == n) {
    tmp = malloc(n);
    top = 0;
  }
  ...
  c = &tmp[top++]; ...
}
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
d-mem
loop1
................................................................................

END-DB
